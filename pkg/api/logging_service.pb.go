// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: logging_service/logging_service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	api_types "github.com/influenzanet/go-utils/pkg/api_types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LogEventType int32

const (
	LogEventType_NONE     LogEventType = 0
	LogEventType_SECURITY LogEventType = 1
	LogEventType_ERROR    LogEventType = 2
	LogEventType_LOG      LogEventType = 3
)

// Enum value maps for LogEventType.
var (
	LogEventType_name = map[int32]string{
		0: "NONE",
		1: "SECURITY",
		2: "ERROR",
		3: "LOG",
	}
	LogEventType_value = map[string]int32{
		"NONE":     0,
		"SECURITY": 1,
		"ERROR":    2,
		"LOG":      3,
	}
)

func (x LogEventType) Enum() *LogEventType {
	p := new(LogEventType)
	*p = x
	return p
}

func (x LogEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_logging_service_logging_service_proto_enumTypes[0].Descriptor()
}

func (LogEventType) Type() protoreflect.EnumType {
	return &file_logging_service_logging_service_proto_enumTypes[0]
}

func (x LogEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogEventType.Descriptor instead.
func (LogEventType) EnumDescriptor() ([]byte, []int) {
	return file_logging_service_logging_service_proto_rawDescGZIP(), []int{0}
}

type NewLogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string       `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Origin     string       `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	EventType  LogEventType `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3,enum=influenzanet.logging_service.LogEventType" json:"event_type,omitempty"`
	EventName  string       `protobuf:"bytes,4,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	UserId     string       `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Msg        string       `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *NewLogEvent) Reset() {
	*x = NewLogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logging_service_logging_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewLogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewLogEvent) ProtoMessage() {}

func (x *NewLogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_logging_service_logging_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewLogEvent.ProtoReflect.Descriptor instead.
func (*NewLogEvent) Descriptor() ([]byte, []int) {
	return file_logging_service_logging_service_proto_rawDescGZIP(), []int{0}
}

func (x *NewLogEvent) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *NewLogEvent) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *NewLogEvent) GetEventType() LogEventType {
	if x != nil {
		return x.EventType
	}
	return LogEventType_NONE
}

func (x *NewLogEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *NewLogEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NewLogEvent) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type LogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	EventType LogEventType          `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=influenzanet.logging_service.LogEventType" json:"event_type,omitempty"` // TODO: time query
}

func (x *LogQuery) Reset() {
	*x = LogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logging_service_logging_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogQuery) ProtoMessage() {}

func (x *LogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_logging_service_logging_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogQuery.ProtoReflect.Descriptor instead.
func (*LogQuery) Descriptor() ([]byte, []int) {
	return file_logging_service_logging_service_proto_rawDescGZIP(), []int{1}
}

func (x *LogQuery) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LogQuery) GetEventType() LogEventType {
	if x != nil {
		return x.EventType
	}
	return LogEventType_NONE
}

type LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time       int64        `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	EventType  LogEventType `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3,enum=influenzanet.logging_service.LogEventType" json:"event_type,omitempty"`
	Origin     string       `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	InstanceId string       `protobuf:"bytes,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	EventName  string       `protobuf:"bytes,6,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	UserId     string       `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Msg        string       `protobuf:"bytes,8,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *LogEvent) Reset() {
	*x = LogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logging_service_logging_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvent) ProtoMessage() {}

func (x *LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_logging_service_logging_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvent.ProtoReflect.Descriptor instead.
func (*LogEvent) Descriptor() ([]byte, []int) {
	return file_logging_service_logging_service_proto_rawDescGZIP(), []int{2}
}

func (x *LogEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogEvent) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LogEvent) GetEventType() LogEventType {
	if x != nil {
		return x.EventType
	}
	return LogEventType_NONE
}

func (x *LogEvent) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *LogEvent) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *LogEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *LogEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LogEvent) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_logging_service_logging_service_proto protoreflect.FileDescriptor

var file_logging_service_logging_service_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdb, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8c, 0x01,
	0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfc, 0x01, 0x0a,
	0x08, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0x3a, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x03, 0x32, 0x95, 0x02, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x12, 0x44, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x22,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x26, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42,
	0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logging_service_logging_service_proto_rawDescOnce sync.Once
	file_logging_service_logging_service_proto_rawDescData = file_logging_service_logging_service_proto_rawDesc
)

func file_logging_service_logging_service_proto_rawDescGZIP() []byte {
	file_logging_service_logging_service_proto_rawDescOnce.Do(func() {
		file_logging_service_logging_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_logging_service_logging_service_proto_rawDescData)
	})
	return file_logging_service_logging_service_proto_rawDescData
}

var file_logging_service_logging_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_logging_service_logging_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_logging_service_logging_service_proto_goTypes = []interface{}{
	(LogEventType)(0),               // 0: influenzanet.logging_service.LogEventType
	(*NewLogEvent)(nil),             // 1: influenzanet.logging_service.NewLogEvent
	(*LogQuery)(nil),                // 2: influenzanet.logging_service.LogQuery
	(*LogEvent)(nil),                // 3: influenzanet.logging_service.LogEvent
	(*api_types.TokenInfos)(nil),    // 4: influenzanet.shared.TokenInfos
	(*empty.Empty)(nil),             // 5: google.protobuf.Empty
	(*api_types.ServiceStatus)(nil), // 6: influenzanet.shared.ServiceStatus
}
var file_logging_service_logging_service_proto_depIdxs = []int32{
	0, // 0: influenzanet.logging_service.NewLogEvent.event_type:type_name -> influenzanet.logging_service.LogEventType
	4, // 1: influenzanet.logging_service.LogQuery.token:type_name -> influenzanet.shared.TokenInfos
	0, // 2: influenzanet.logging_service.LogQuery.event_type:type_name -> influenzanet.logging_service.LogEventType
	0, // 3: influenzanet.logging_service.LogEvent.event_type:type_name -> influenzanet.logging_service.LogEventType
	5, // 4: influenzanet.logging_service.LoggingServiceApi.Status:input_type -> google.protobuf.Empty
	1, // 5: influenzanet.logging_service.LoggingServiceApi.SaveLogEvent:input_type -> influenzanet.logging_service.NewLogEvent
	2, // 6: influenzanet.logging_service.LoggingServiceApi.GetLogs:input_type -> influenzanet.logging_service.LogQuery
	6, // 7: influenzanet.logging_service.LoggingServiceApi.Status:output_type -> influenzanet.shared.ServiceStatus
	6, // 8: influenzanet.logging_service.LoggingServiceApi.SaveLogEvent:output_type -> influenzanet.shared.ServiceStatus
	3, // 9: influenzanet.logging_service.LoggingServiceApi.GetLogs:output_type -> influenzanet.logging_service.LogEvent
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_logging_service_logging_service_proto_init() }
func file_logging_service_logging_service_proto_init() {
	if File_logging_service_logging_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logging_service_logging_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewLogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logging_service_logging_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logging_service_logging_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logging_service_logging_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logging_service_logging_service_proto_goTypes,
		DependencyIndexes: file_logging_service_logging_service_proto_depIdxs,
		EnumInfos:         file_logging_service_logging_service_proto_enumTypes,
		MessageInfos:      file_logging_service_logging_service_proto_msgTypes,
	}.Build()
	File_logging_service_logging_service_proto = out.File
	file_logging_service_logging_service_proto_rawDesc = nil
	file_logging_service_logging_service_proto_goTypes = nil
	file_logging_service_logging_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoggingServiceApiClient is the client API for LoggingServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggingServiceApiClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*api_types.ServiceStatus, error)
	SaveLogEvent(ctx context.Context, in *NewLogEvent, opts ...grpc.CallOption) (*api_types.ServiceStatus, error)
	GetLogs(ctx context.Context, in *LogQuery, opts ...grpc.CallOption) (LoggingServiceApi_GetLogsClient, error)
}

type loggingServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingServiceApiClient(cc grpc.ClientConnInterface) LoggingServiceApiClient {
	return &loggingServiceApiClient{cc}
}

func (c *loggingServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*api_types.ServiceStatus, error) {
	out := new(api_types.ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.logging_service.LoggingServiceApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggingServiceApiClient) SaveLogEvent(ctx context.Context, in *NewLogEvent, opts ...grpc.CallOption) (*api_types.ServiceStatus, error) {
	out := new(api_types.ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.logging_service.LoggingServiceApi/SaveLogEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggingServiceApiClient) GetLogs(ctx context.Context, in *LogQuery, opts ...grpc.CallOption) (LoggingServiceApi_GetLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LoggingServiceApi_serviceDesc.Streams[0], "/influenzanet.logging_service.LoggingServiceApi/GetLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggingServiceApiGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LoggingServiceApi_GetLogsClient interface {
	Recv() (*LogEvent, error)
	grpc.ClientStream
}

type loggingServiceApiGetLogsClient struct {
	grpc.ClientStream
}

func (x *loggingServiceApiGetLogsClient) Recv() (*LogEvent, error) {
	m := new(LogEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoggingServiceApiServer is the server API for LoggingServiceApi service.
type LoggingServiceApiServer interface {
	Status(context.Context, *empty.Empty) (*api_types.ServiceStatus, error)
	SaveLogEvent(context.Context, *NewLogEvent) (*api_types.ServiceStatus, error)
	GetLogs(*LogQuery, LoggingServiceApi_GetLogsServer) error
}

// UnimplementedLoggingServiceApiServer can be embedded to have forward compatible implementations.
type UnimplementedLoggingServiceApiServer struct {
}

func (*UnimplementedLoggingServiceApiServer) Status(context.Context, *empty.Empty) (*api_types.ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedLoggingServiceApiServer) SaveLogEvent(context.Context, *NewLogEvent) (*api_types.ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLogEvent not implemented")
}
func (*UnimplementedLoggingServiceApiServer) GetLogs(*LogQuery, LoggingServiceApi_GetLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}

func RegisterLoggingServiceApiServer(s *grpc.Server, srv LoggingServiceApiServer) {
	s.RegisterService(&_LoggingServiceApi_serviceDesc, srv)
}

func _LoggingServiceApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingServiceApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.logging_service.LoggingServiceApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingServiceApiServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggingServiceApi_SaveLogEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLogEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingServiceApiServer).SaveLogEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.logging_service.LoggingServiceApi/SaveLogEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingServiceApiServer).SaveLogEvent(ctx, req.(*NewLogEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggingServiceApi_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggingServiceApiServer).GetLogs(m, &loggingServiceApiGetLogsServer{stream})
}

type LoggingServiceApi_GetLogsServer interface {
	Send(*LogEvent) error
	grpc.ServerStream
}

type loggingServiceApiGetLogsServer struct {
	grpc.ServerStream
}

func (x *loggingServiceApiGetLogsServer) Send(m *LogEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _LoggingServiceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "influenzanet.logging_service.LoggingServiceApi",
	HandlerType: (*LoggingServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _LoggingServiceApi_Status_Handler,
		},
		{
			MethodName: "SaveLogEvent",
			Handler:    _LoggingServiceApi_SaveLogEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _LoggingServiceApi_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logging_service/logging_service.proto",
}
